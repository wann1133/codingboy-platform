// ===========================================
// üîß Prisma Schema for CodingBoy Platform
// Compatible with Prisma 6.16.x & Supabase
// ===========================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// ===========================================
// üë§ USER MODEL
// ===========================================
model User {
  id           String        @id @default(cuid())
  clerkId      String        @unique
  email        String        @unique
  password     String        @default("changeme") // Default fallback; gunakan hash di production
  firstName    String?
  lastName     String?
  phone        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relations
  inquiries    Inquiry[]
  projects     Project[]
  testimonials Testimonial[]

  @@map("users")
}

// ===========================================
// üß© SERVICE MODEL
// ===========================================
model Service {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String
  price       Int
  duration    String
  features    String     // JSON string (portable for frontend)
  popular     Boolean    @default(false)
  active      Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  projects    Project[]

  @@map("services")
}

// ===========================================
// üöß PROJECT MODEL
// ===========================================
model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(PENDING)
  progress    Int           @default(0)
  startDate   DateTime?
  deadline    DateTime?
  completedAt DateTime?
  totalAmount Int
  paidAmount  Int           @default(0)
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Foreign Keys
  userId      String
  serviceId   String

  // Relations
  service     Service       @relation(fields: [serviceId], references: [id])
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("projects")
}

// ===========================================
// üíº PORTFOLIO MODEL
// ===========================================
model Portfolio {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String
  category    String
  image       String?
  url         String?
  duration    String
  client      String?
  testimonial String?
  rating      Int?     @default(5)
  featured    Boolean  @default(false)
  active      Boolean  @default(true)
  status      String   @default("ongoing")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  features    String[]  // Array of features (Postgres supports text[])

  @@map("portfolios")
}

// ===========================================
// üí¨ TESTIMONIAL MODEL
// ===========================================
model Testimonial {
  id        String   @id @default(cuid())
  name      String
  company   String?
  rating    Int      @default(5)
  text      String
  avatar    String?
  featured  Boolean  @default(false)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("testimonials")
}

// ===========================================
// üìù BLOG MODEL
// ===========================================
model BlogPost {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  excerpt     String?
  content     String
  image       String?
  category    String
  tags        String     // JSON stringified array (portable for frontend)
  readTime    String?
  published   Boolean   @default(false)
  featured    Boolean   @default(false)
  views       Int       @default(0)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("blog_posts")
}

// ===========================================
// üì© INQUIRY MODEL
// ===========================================
model Inquiry {
  id          String        @id @default(cuid())
  name        String
  email       String
  phone       String?
  service     String?
  budget      String?
  message     String
  status      InquiryStatus @default(NEW)
  responded   Boolean       @default(false)
  respondedAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  userId      String?
  user        User?         @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("inquiries")
}

// ===========================================
// üí≥ PAYMENT MODEL
// ===========================================
model Payment {
  id            String        @id @default(cuid())
  orderId       String        @unique
  amount        Int
  status        PaymentStatus @default(PENDING)
  paymentMethod String?
  transactionId String?
  paidAt        DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("payments")
}

// ===========================================
// üî¢ ENUMS
// ===========================================
enum ProjectStatus {
  PENDING
  IN_PROGRESS
  REVIEW
  REVISION
  COMPLETED
  CANCELLED
}

enum InquiryStatus {
  NEW
  CONTACTED
  QUOTED
  CONVERTED
  CLOSED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
  REFUNDED
}
