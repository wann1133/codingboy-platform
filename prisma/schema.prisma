// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  firstName String?
  lastName  String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projects     Project[]
  testimonials Testimonial[]
  inquiries    Inquiry[]

  @@map("users")
}

model Service {
  id          String  @id @default(cuid())
  name        String
  slug        String  @unique
  description String
  price       Int
  duration    String
  features    String // JSON string of features (SQLite doesn't support arrays)
  popular     Boolean  @default(false)
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  projects Project[]

  @@map("services")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(PENDING)
  progress    Int           @default(0)
  startDate   DateTime?
  deadline    DateTime?
  completedAt DateTime?
  totalAmount Int
  paidAmount  Int           @default(0)
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Foreign Keys
  userId    String
  serviceId String

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id])

  @@map("projects")
}

model Portfolio {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String
  category    String
  image       String?
  url         String?
  features    String // JSON string of features (SQLite doesn't support arrays)
  duration    String
  client      String?
  testimonial String?
  rating      Int?     @default(5)
  featured    Boolean  @default(false)
  active      Boolean  @default(true)
  status      String   @default("ongoing")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("portfolios")
}

model Testimonial {
  id        String   @id @default(cuid())
  name      String
  company   String?
  rating    Int      @default(5)
  text      String
  avatar    String?
  featured  Boolean  @default(false)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign Keys
  userId String?

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("testimonials")
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  excerpt     String?
  content     String
  image       String?
  category    String
  tags        String // JSON string of tags (SQLite doesn't support arrays)
  readTime    String?
  published   Boolean  @default(false)
  featured    Boolean  @default(false)
  views       Int      @default(0)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("blog_posts")
}

model Inquiry {
  id          String      @id @default(cuid())
  name        String
  email       String
  phone       String?
  service     String?
  budget      String?
  message     String
  status      InquiryStatus @default(NEW)
  responded   Boolean     @default(false)
  respondedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Foreign Keys
  userId String?

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("inquiries")
}

model Payment {
  id            String        @id @default(cuid())
  orderId       String        @unique
  amount        Int
  status        PaymentStatus @default(PENDING)
  paymentMethod String?
  transactionId String?
  paidAt        DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("payments")
}

enum ProjectStatus {
  PENDING
  IN_PROGRESS
  REVIEW
  REVISION
  COMPLETED
  CANCELLED
}

enum InquiryStatus {
  NEW
  CONTACTED
  QUOTED
  CONVERTED
  CLOSED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
  REFUNDED
}
